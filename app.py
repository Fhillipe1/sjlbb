# app.py

# Importa as bibliotecas necess√°rias
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import datetime # Para lidar com objetos de tempo

# --- 1. Configura√ß√µes da P√°gina Streamlit ---
# Define o t√≠tulo da p√°gina, o √≠cone e o layout.
# O layout 'wide' utiliza toda a largura dispon√≠vel da tela, o que √© √≥timo para dashboards.
st.set_page_config(
    page_title="Dashboard La Brasa Burger - Faturamento Madrugada",
    page_icon="üçî", # √çcone que aparece na aba do navegador
    layout="wide"
)

# --- 2. Carregamento e Tratamento dos Dados ---

# Define o caminho do arquivo de dados.
# O 'st.cache_data' armazena em cache os resultados da fun√ß√£o,
# o que acelera a aplica√ß√£o se os dados n√£o mudarem.
@st.cache_data
def load_data():
    # Carrega a planilha Excel. O engine 'openpyxl' √© necess√°rio para arquivos .xlsx.
    # CORRIGIDO: Nome do arquivo agora √© 'Vendas por per√≠odo.xlsx'
    df = pd.read_excel("data/Vendas por per√≠odo.xlsx", engine='openpyxl')

    # Lista de colunas a serem removidas conforme sua solicita√ß√£o
    # CORRIGIDO: Removida 'Forma de pagamento' e garantida que 'Pagamento' seja mantida
    columns_to_drop = [
        "Pedido", "C√≥digo da loja", "Nome da loja", "Tipo do pedido", "Turno",
        "Canal de venda", "N√∫mero do pedido no parceiro", "Consumidor",
        "Tem cupom", "Esta cancelado", "Itens", "Entrega", "Entregador",
        "Bairro", "CEP", "Acr√©scimo", "Motivo de acr√©scimo", "Desconto",
        "Motivo do desconto"
    ]
    # Remove as colunas especificadas
    df = df.drop(columns=columns_to_drop)

    # Converte a coluna 'Data da venda' para o tipo datetime, lidando com poss√≠veis erros
    df['Data da venda'] = pd.to_datetime(df['Data da venda'], errors='coerce')

    # Remove linhas onde 'Data da venda' se tornou NaT (Not a Time) ap√≥s a convers√£o
    df.dropna(subset=['Data da venda'], inplace=True)

    # Cria as colunas 'Data' e 'Hora' a partir de 'Data da venda'
    df['Data'] = df['Data da venda'].dt.date
    df['Hora'] = df['Data da venda'].dt.time

    # Filtra os dados para manter apenas os hor√°rios entre 00:00 e 05:00
    # Cria um objeto de tempo para 00:00:00 e 05:00:00
    start_time = datetime.time(0, 0, 0) # Usando datetime.time
    end_time = datetime.time(5, 0, 0)   # Usando datetime.time

    # Aplica o filtro de hor√°rio
    df = df[ (df['Hora'] >= start_time) & (df['Hora'] <= end_time) ]

    # Garante que 'Total' seja num√©rico
    # CORRIGIDO: Coluna 'Total'
    df['Total'] = pd.to_numeric(df['Total'], errors='coerce')
    # Remove linhas com valores nulos no 'Total' ap√≥s a convers√£o
    df.dropna(subset=['Total'], inplace=True)


    return df

# Carrega os dados tratados
df = load_data()

# --- 3. Sidebar para Filtros ---
st.sidebar.header("Filtros")

# Filtro de Data
# Pega a data m√≠nima e m√°xima dispon√≠vel nos dados
min_date = df['Data'].min()
max_date = df['Data'].max()

# Permite ao usu√°rio selecionar um intervalo de datas
date_range = st.sidebar.date_input(
    "Selecione o Per√≠odo",
    value=(min_date, max_date), # Valor inicial exibido
    min_value=min_date,
    max_value=max_date
)

# Garante que date_range tenha dois elementos (in√≠cio e fim)
if len(date_range) == 2:
    start_date, end_date = date_range
else:
    # Se apenas uma data for selecionada, defina o fim como a mesma data
    start_date = date_range[0]
    end_date = date_range[0]

# Filtra o DataFrame com base nas datas selecionadas
df_filtered = df[(df['Data'] >= start_date) & (df['Data'] <= end_date)]

# Adiciona um filtro para o m√©todo de pagamento
# CORRIGIDO: Usando a coluna 'Pagamento'
st.sidebar.subheader("Filtrar por M√©todo de Pagamento")
payment_methods = df_filtered['Pagamento'].unique().tolist()
selected_payment_methods = st.sidebar.multiselect(
    "Selecione as Formas de Pagamento",
    options=payment_methods,
    default=payment_methods # Seleciona todas por padr√£o
)

# Aplica o filtro de m√©todo de pagamento
# CORRIGIDO: Usando a coluna 'Pagamento'
df_filtered = df_filtered[df_filtered['Pagamento'].isin(selected_payment_methods)]

# --- 4. T√≠tulo Principal do Dashboard ---
st.title("üçî Dashboard Faturamento Madrugada - La Brasa Burger Aracaju")
st.markdown("An√°lise detalhada do desempenho de vendas no per√≠odo da madrugada (00:00 - 05:00).")

# Verifica se h√° dados ap√≥s os filtros
if df_filtered.empty:
    st.warning("Nenhum dado encontrado para os filtros selecionados. Tente ajustar os filtros.")
else:
    # --- 5. M√©tricas Chave (Key Performance Indicators - KPIs) ---
    st.subheader("M√©tricas de Faturamento")

    # Calcula o faturamento total e o n√∫mero de pedidos
    # CORRIGIDO: Usando a coluna 'Total'
    total_revenue = df_filtered['Total'].sum()
    total_orders = df_filtered.shape[0] # N√∫mero de linhas = n√∫mero de pedidos

    # Exibe as m√©tricas em colunas para um layout organizado
    col1, col2 = st.columns(2)

    with col1:
        st.metric(label="Faturamento Total (Madrugada)", value=f"R$ {total_revenue:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
        # Formata o valor para R$ com duas casas decimais e separador de milhar
        # A gambiarra .replace(",", "X").replace(".", ",").replace("X", ".") √© para formatar para padr√£o BR
    with col2:
        st.metric(label="Total de Pedidos (Madrugada)", value=f"{total_orders:,}".replace(",", "."))

    # --- 6. Gr√°ficos ---
    st.subheader("Visualiza√ß√µes do Faturamento")

    # Layout de colunas para os gr√°ficos
    col3, col4 = st.columns(2)

    with col3:
        # Gr√°fico de Linha: Faturamento por Data
        st.markdown("##### Faturamento Di√°rio no Per√≠odo da Madrugada")
        # Agrupa os dados por data e soma o valor total do pedido
        # CORRIGIDO: Usando a coluna 'Total'
        daily_revenue = df_filtered.groupby('Data')['Total'].sum().reset_index()
        fig_line = px.line(
            daily_revenue,
            x='Data',
            y='Total', # CORRIGIDO: Coluna 'Total'
            title='Faturamento Total por Dia',
            labels={'Total': 'Faturamento (R$)', 'Data': 'Data'}, # CORRIGIDO: Label 'Total'
            markers=True # Adiciona marcadores nos pontos de dados
        )
        fig_line.update_traces(line_color='#FF4B4B') # Cor neutra para linha
        fig_line.update_layout(hovermode="x unified") # Melhora a interatividade do hover
        st.plotly_chart(fig_line, use_container_width=True)


    with col4:
        # Gr√°fico de Pizza: Distribui√ß√£o de Faturamento por Forma de Pagamento
        st.markdown("##### Distribui√ß√£o do Faturamento por Forma de Pagamento")
        # CORRIGIDO: Usando a coluna 'Pagamento'
        payment_revenue = df_filtered.groupby('Pagamento')['Total'].sum().reset_index()
        fig_pie = px.pie(
            payment_revenue,
            values='Total', # CORRIGIDO: Coluna 'Total'
            names='Pagamento', # CORRIGIDO: Coluna 'Pagamento'
            title='Faturamento por Forma de Pagamento',
            hole=0.4, # Cria um gr√°fico de donut
            color_discrete_sequence=px.colors.qualitative.Pastel # Uma paleta de cores suave
        )
        fig_pie.update_traces(textposition='inside', textinfo='percent+label', marker=dict(line=dict(color='#000000', width=1)))
        st.plotly_chart(fig_pie, use_container_width=True)

    # Gr√°fico de Barras: Pedidos por Hora da Madrugada
    st.markdown("##### N√∫mero de Pedidos e Faturamento por Hora na Madrugada")
    # Extrai a hora como uma string para agrupar facilmente
    df_filtered['Hora_Str'] = df_filtered['Hora'].apply(lambda x: x.strftime('%H:00'))

    # Agrupa os dados por hora, contando os pedidos e somando o faturamento
    hourly_summary = df_filtered.groupby('Hora_Str').agg(
        Contagem_de_Pedidos=('Hora_Str', 'size'), # Conta o n√∫mero de pedidos
        Faturamento_Total=('Total', 'sum')       # Soma o faturamento
    ).reset_index()

    # Garante a ordem correta das horas para exibi√ß√£o
    hourly_summary['Hora_Str'] = pd.Categorical(hourly_summary['Hora_Str'],
                                              categories=[f'{h:02d}:00' for h in range(6)], # Horas de 00 a 05
                                              ordered=True)
    hourly_summary = hourly_summary.sort_values('Hora_Str')

    fig_bar_hourly = px.bar(
        hourly_summary,
        x='Hora_Str',
        y='Contagem_de_Pedidos', # O eixo Y continua sendo a contagem de pedidos
        title='Contagem de Pedidos e Faturamento por Hora (Madrugada)',
        labels={'Hora_Str': 'Hora', 'Contagem_de_Pedidos': 'N√∫mero de Pedidos'},
        color='Contagem_de_Pedidos', # Colore as barras com base na contagem
        color_continuous_scale=px.colors.sequential.Bluyl, # Uma escala de cor suave
        # Inclui o faturamento total na tooltip (informa√ß√£o ao passar o mouse)
        hover_data={
            'Faturamento_Total': ':.2f' # Formata o faturamento para 2 casas decimais
        }
    )
    # Atualiza o template da tooltip para exibir Faturamento com R$ e separador de milhar
    fig_bar_hourly.update_traces(
        hovertemplate="""
        <b>Hora</b>: %{x}<br>
        <b>N√∫mero de Pedidos</b>: %{y}<br>
        <b>Faturamento Total</b>: R$ %{customdata[0]:,.2f}
        <extra></extra>
        """,
        customdata=hourly_summary[['Faturamento_Total']].values # Passa Faturamento_Total como customdata
    )


    fig_bar_hourly.update_layout(xaxis_title="Hora", yaxis_title="N√∫mero de Pedidos")
    st.plotly_chart(fig_bar_hourly, use_container_width=True)

    # --- 7. Tabela de Dados (Opcional, para debug ou visualiza√ß√£o detalhada) ---
    st.subheader("Dados Detalhados (Amostra)")
    st.dataframe(df_filtered) # Mostra as primeiras 10 linhas dos dados filtrados