# app.py

# Importa as bibliotecas necess√°rias
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import datetime # Para lidar com objetos de tempo

# --- 1. Configura√ß√µes da P√°gina Streamlit ---
# Define o t√≠tulo da p√°gina, o √≠cone e o layout.
# O layout 'wide' utiliza toda a largura dispon√≠vel da tela, o que √© √≥timo para dashboards.
st.set_page_config(
    page_title="Dashboard La Brasa Burger - Faturamento Madrugada",
    page_icon="üçî", # √çcone que aparece na aba do navegador
    layout="wide"
)

# --- 2. CSS Customizado para Estilo e Cards ---
# Injeta CSS diretamente na aplica√ß√£o Streamlit.
# O 'unsafe_allow_html=True' √© necess√°rio para permitir a renderiza√ß√£o de HTML/CSS.
st.markdown("""
<style>
/* Estilo geral do corpo da aplica√ß√£o Streamlit */
.stApp {
    background-color: #0E1117; /* Cor de fundo principal, corresponde ao config.toml */
    color: #FAFAFA; /* Cor do texto padr√£o, corresponde ao config.toml */
}

/* Estiliza√ß√£o do T√≠tulo Principal */
.main-title {
    font-size: 3.8em; /* Tamanho da fonte maior */
    font-weight: 800; /* Extra bold */
    text-align: center; /* Centraliza o texto */
    color: #FFFFFF; /* Cor branca para alto contraste */
    text-shadow: 2px 2px 6px rgba(0,0,0,0.5); /* Sombra sutil para profundidade */
    margin-bottom: 0.2em; /* Espa√ßo abaixo do t√≠tulo */
    padding-top: 0.5em; /* Espa√ßo acima do t√≠tulo */
}

/* Estiliza√ß√£o do Subt√≠tulo/Nome da Empresa */
.subtitle {
    font-size: 1.8em; /* Tamanho da fonte do subt√≠tulo */
    text-align: center; /* Centraliza o texto */
    color: #FF4B4B; /* Cor prim√°ria do tema para destaque */
    margin-top: -0.2em; /* Ajusta a margem para ficar mais pr√≥ximo do t√≠tulo principal */
    margin-bottom: 1.5em; /* Espa√ßo abaixo do subt√≠tulo */
    font-weight: 600; /* Semi-bold */
}

/* Estilo para os Cards de M√©tricas (KPIs) */
/* Seleciona o cont√™iner de cada m√©trica Streamlit (st.metric) */
div[data-testid="stMetric"] {
    background-color: #1E202B; /* Cor de fundo do card, ligeiramente mais clara que o fundo principal */
    border-radius: 12px; /* Cantos arredondados */
    padding: 25px; /* Espa√ßamento interno */
    margin-bottom: 25px; /* Espa√ßo entre os cards e outros elementos */
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3); /* Sombra mais pronunciada para efeito de eleva√ß√£o */
    border: 1px solid #333642; /* Borda sutil */
    text-align: center; /* Centraliza o conte√∫do (label e valor) dentro do card */
    min-height: 130px; /* Altura m√≠nima para os cards */
    display: flex; /* Usa flexbox para alinhamento */
    flex-direction: column; /* Coloca itens em coluna */
    justify-content: center; /* Centraliza verticalmente */
    align-items: center; /* Centraliza horizontalmente */
}

/* Estilo para o Label (t√≠tulo) dentro do Card da M√©trica */
div[data-testid="stMetricLabel"] > div {
    font-size: 1.2em; /* Tamanho da fonte do label */
    color: #BBBBBB; /* Cor mais clara para o label */
    font-weight: 500; /* Peso da fonte */
    margin-bottom: 8px; /* Espa√ßo entre o label e o valor */
}

/* Estilo para o Valor dentro do Card da M√©trica */
div[data-testid="stMetricValue"] {
    font-size: 3em; /* Tamanho da fonte do valor (bem maior) */
    font-weight: bold; /* Negrito */
    color: #FF4B4B; /* Cor prim√°ria do tema para o valor */
    /* Formata o valor para n√£o quebrar linha */
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

/* Estilo para os gr√°ficos Plotly (para que se pare√ßam com cards tamb√©m) */
.stPlotlyChart {
    background-color: #1E202B; /* Cor de fundo igual a dos cards */
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
    margin-bottom: 25px;
    border: 1px solid #333642;
}

/* Ajustes para elementos da Sidebar (filtros) para combinar com o tema */
.st-emotion-cache-1pxazr7 div.stSelectbox,
.st-emotion-cache-1pxazr7 div.stMultiSelect,
.st-emotion-cache-1pxazr7 div.stDateInput,
.st-emotion-cache-1pxazr7 div.stTextInput {
    background-color: #262730; /* Cor de fundo secund√°ria do config.toml */
    border-radius: 8px;
    padding: 8px;
    border: 1px solid #333642;
}

/* Garante que o texto dos t√≠tulos e par√°grafos na sidebar tenha a cor correta */
.st-emotion-cache-1pxazr7 h1, .st-emotion-cache-1pxazr7 h2, .st-emotion-cache-1pxazr7 h3,
.st-emotion-cache-1pxazr7 h4, .st-emotion-cache-1pxazr7 h5, .st-emotion-cache-1pxazr7 h6,
.st-emotion-cache-1pxazr7 p, .st-emotion-cache-1pxazr7 label {
    color: #FAFAFA !important; /* !important para garantir a aplica√ß√£o */
}

/* Estilo para bot√µes (se houver, para combinar com o tema) */
.stButton>button {
    background-color: #FF4B4B;
    color: white;
    border-radius: 8px;
    border: none;
    padding: 10px 20px;
    font-weight: bold;
}
.stButton>button:hover {
    background-color: #E03A3A;
}

</style>
""", unsafe_allow_html=True) # ESSENCIAL para que o Streamlit renderize o HTML e CSS


# --- 3. Carregamento e Tratamento dos Dados ---

# O 'st.cache_data' armazena em cache os resultados da fun√ß√£o,
# o que acelera a aplica√ß√£o se os dados n√£o mudarem.
@st.cache_data
def load_data():
    # Carrega a planilha Excel. O engine 'openpyxl' √© necess√°rio para arquivos .xlsx.
    df = pd.read_excel("data/Vendas por per√≠odo.xlsx", engine='openpyxl')

    # Lista de colunas a serem removidas conforme sua solicita√ß√£o
    columns_to_drop = [
        "Pedido", "C√≥digo da loja", "Nome da loja", "Tipo do pedido", "Turno",
        "Canal de venda", "N√∫mero do pedido no parceiro", "Consumidor",
        "Tem cupom", "Esta cancelado", "Itens", "Entrega", "Entregador",
        "Bairro", "CEP", "Acr√©scimo", "Motivo de acr√©scimo", "Desconto",
        "Motivo do desconto"
    ]
    df = df.drop(columns=columns_to_drop)

    # Converte a coluna 'Data da venda' para o tipo datetime, lidando com poss√≠veis erros
    df['Data da venda'] = pd.to_datetime(df['Data da venda'], errors='coerce')

    # Remove linhas onde 'Data da venda' se tornou NaT (Not a Time) ap√≥s a convers√£o
    df.dropna(subset=['Data da venda'], inplace=True)

    # Cria as colunas 'Data' e 'Hora' a partir de 'Data da venda'
    df['Data'] = df['Data da venda'].dt.date
    df['Hora'] = df['Data da venda'].dt.time

    # Filtra os dados para manter apenas os hor√°rios entre 00:00 e 05:00
    start_time = datetime.time(0, 0, 0)
    end_time = datetime.time(5, 0, 0)
    df = df[ (df['Hora'] >= start_time) & (df['Hora'] <= end_time) ]

    # Garante que 'Total' seja num√©rico
    df['Total'] = pd.to_numeric(df['Total'], errors='coerce')
    # Remove linhas com valores nulos no 'Total' ap√≥s a convers√£o
    df.dropna(subset=['Total'], inplace=True)

    return df

# Carrega os dados tratados
df = load_data()

# --- 4. Sidebar para Filtros ---
st.sidebar.header("Filtros")

# Filtro de Data
# Pega a data m√≠nima e m√°xima dispon√≠vel nos dados
min_date = df['Data'].min()
max_date = df['Data'].max()

# Permite ao usu√°rio selecionar um intervalo de datas
date_range = st.sidebar.date_input(
    "Selecione o Per√≠odo",
    value=(min_date, max_date),
    min_value=min_date,
    max_value=max_date
)

# Garante que date_range tenha dois elementos (in√≠cio e fim)
if len(date_range) == 2:
    start_date, end_date = date_range
else:
    # Se apenas uma data for selecionada, defina o fim como a mesma data
    start_date = date_range[0]
    end_date = date_range[0]

# Filtra o DataFrame com base nas datas selecionadas
df_filtered = df[(df['Data'] >= start_date) & (df['Data'] <= end_date)]

# Adiciona um filtro para o m√©todo de pagamento
st.sidebar.subheader("Filtrar por M√©todo de Pagamento")
payment_methods = df_filtered['Pagamento'].unique().tolist()
selected_payment_methods = st.sidebar.multiselect(
    "Selecione as Formas de Pagamento",
    options=payment_methods,
    default=payment_methods
)

# Aplica o filtro de m√©todo de pagamento
df_filtered = df_filtered[df_filtered['Pagamento'].isin(selected_payment_methods)]

# --- 5. T√≠tulo Principal do Dashboard ---
# Usando as classes CSS personalizadas para o t√≠tulo e subt√≠tulo
st.markdown("<h1 class='main-title'>üçî Dashboard Faturamento Madrugada</h1>", unsafe_allow_html=True)
st.markdown("<h2 class='subtitle'>La Brasa Burger Aracaju</h2>", unsafe_allow_html=True)
st.markdown("An√°lise detalhada do desempenho de vendas no per√≠odo da madrugada (00:00 - 05:00).")

# --- 6. M√©tricas Chave (Key Performance Indicators - KPIs) ---
# Inicializa as vari√°veis para evitar erro de refer√™ncia se o DataFrame filtrado estiver vazio
total_revenue = 0.0
total_orders = 0

if df_filtered.empty:
    st.warning("Nenhum dado encontrado para os filtros selecionados. Tente ajustar os filtros.")
else:
    # Calcula o faturamento total e o n√∫mero de pedidos SOMENTE SE houver dados
    total_revenue = df_filtered['Total'].sum()
    total_orders = df_filtered.shape[0] # N√∫mero de linhas = n√∫mero de pedidos

# Exibe as m√©tricas em colunas para um layout organizado
# Est√£o fora do 'else' para garantir que os cards sempre apare√ßam, mesmo com valores zero
col1, col2 = st.columns(2)

with col1:
    # st.metric ser√° automaticamente estilizado pelo CSS div[data-testid="stMetric"]
    st.metric(label="Faturamento Total (Madrugada)", value=f"R$ {total_revenue:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
with col2:
    # st.metric ser√° automaticamente estilizado pelo CSS div[data-testid="stMetric"]
    st.metric(label="Total de Pedidos (Madrugada)", value=f"{total_orders:,}".replace(",", "."))

# --- 7. Gr√°ficos ---
# Os gr√°ficos s√≥ ser√£o renderizados se houver dados, ent√£o permanecem dentro do 'else'
if not df_filtered.empty: # Condi√ß√£o para garantir que os gr√°ficos s√≥ apare√ßam com dados
    st.subheader("Visualiza√ß√µes do Faturamento")

    col3, col4 = st.columns(2)

    with col3:
        st.markdown("##### Faturamento Di√°rio no Per√≠odo da Madrugada")
        daily_revenue = df_filtered.groupby('Data')['Total'].sum().reset_index()
        fig_line = px.line(
            daily_revenue,
            x='Data',
            y='Total',
            title='Faturamento Total por Dia',
            labels={'Total': 'Faturamento (R$)', 'Data': 'Data'},
            markers=True
        )
        fig_line.update_traces(line_color='#FF4B4B') # Cor neutra para linha
        fig_line.update_layout(hovermode="x unified")
        st.plotly_chart(fig_line, use_container_width=True)


    with col4:
        st.markdown("##### Distribui√ß√£o do Faturamento por Forma de Pagamento")
        payment_revenue = df_filtered.groupby('Pagamento')['Total'].sum().reset_index()
        fig_pie = px.pie(
            payment_revenue,
            values='Total',
            names='Pagamento',
            title='Faturamento por Forma de Pagamento',
            hole=0.4,
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        fig_pie.update_traces(textposition='inside', textinfo='percent+label', marker=dict(line=dict(color='#000000', width=1)))
        st.plotly_chart(fig_pie, use_container_width=True)

    st.markdown("##### N√∫mero de Pedidos e Faturamento por Hora na Madrugada")
    df_filtered['Hora_Str'] = df_filtered['Hora'].apply(lambda x: x.strftime('%H:00'))

    hourly_summary = df_filtered.groupby('Hora_Str').agg(
        Contagem_de_Pedidos=('Hora_Str', 'size'),
        Faturamento_Total=('Total', 'sum')
    ).reset_index()

    hourly_summary['Hora_Str'] = pd.Categorical(hourly_summary['Hora_Str'],
                                              categories=[f'{h:02d}:00' for h in range(6)],
                                              ordered=True)
    hourly_summary = hourly_summary.sort_values('Hora_Str')

    fig_bar_hourly = px.bar(
        hourly_summary,
        x='Hora_Str',
        y='Contagem_de_Pedidos',
        title='Contagem de Pedidos e Faturamento por Hora (Madrugada)',
        labels={'Hora_Str': 'Hora', 'Contagem_de_Pedidos': 'N√∫mero de Pedidos'},
        color='Contagem_de_Pedidos',
        color_continuous_scale=px.colors.sequential.Bluyl,
        hover_data={'Faturamento_Total': ':.2f'}
    )
    fig_bar_hourly.update_traces(
        hovertemplate="""
        <b>Hora</b>: %{x}<br>
        <b>N√∫mero de Pedidos</b>: %{y}<br>
        <b>Faturamento Total</b>: R$ %{customdata[0]:,.2f}
        <extra></extra>
        """,
        customdata=hourly_summary[['Faturamento_Total']].values
    )

    fig_bar_hourly.update_layout(xaxis_title="Hora", yaxis_title="N√∫mero de Pedidos")
    st.plotly_chart(fig_bar_hourly, use_container_width=True)

    # --- 8. Tabela de Dados (Amostra) ---
    st.subheader("Dados Detalhados (Amostra)")
    st.dataframe(df_filtered)
